--------------------------------------------------------------------------------
-- Header
--------------------------------------------------------------------------------

-- GitHub: https://github.com/VowSoftware/starly

--------------------------------------------------------------------------------
-- Dependencies
--------------------------------------------------------------------------------

-- Import Starly to interact with the camera.
local m_starly = require "starly.starly"

--------------------------------------------------------------------------------
-- Constants
--------------------------------------------------------------------------------

-- Engine messages.
local c_msg_acquire_input_focus = hash("acquire_input_focus")

-- Engine `action_id` values.
local c_mouse_wheel_up = hash("mouse_wheel_up")
local c_mouse_wheel_down = hash("mouse_wheel_down")
local c_mouse_button_middle = hash("mouse_button_middle")
local c_key_space = hash("key_space")

-- Logo game object id.
local c_id_logo = hash("/logo")

-- Starly game object id.
-- This is passed to the Starly API to control a specific camera.
local c_id_starly = hash("/starly")

-- Max and min zoom values.
local c_zoom_max = 40
local c_zoom_min = 1

--------------------------------------------------------------------------------
-- Engine Functions
--------------------------------------------------------------------------------

function init(self)
	msg.post(msg.url(), c_msg_acquire_input_focus)
	-- Animate the logo for fun.
	go.animate(c_id_logo, "euler.z", go.PLAYBACK_LOOP_PINGPONG, 360, go.EASING_INOUTCUBIC, 5)
end

function on_input(self, action_id, action)
	-- If the mouse moves and the middle mouse button is down, then move the camera accordingly.
	if not action_id then
		if self.v_moving then
			local position = go.get_position(c_id_starly)
			local distance = vmath.vector3(-action.screen_dx, -action.screen_dy, 0) / m_starly[c_id_starly].zoom
			pprint(position, distance)
			go.set_position(position + distance, c_id_starly)
		end
	elseif action.pressed then
		if action_id == c_mouse_wheel_up then
			-- If the mouse wheel is scrolled up, the zoom in.
			m_starly[c_id_starly].zoom = m_starly[c_id_starly].zoom * 2
			if m_starly[c_id_starly].zoom > c_zoom_max then
				m_starly[c_id_starly].zoom = c_zoom_max
			end
		elseif action_id == c_mouse_wheel_down then
			-- If the mouse wheel is scrolled up, the zoom out.
			m_starly[c_id_starly].zoom = m_starly[c_id_starly].zoom * 0.5
			if m_starly[c_id_starly].zoom < c_zoom_min then
				m_starly[c_id_starly].zoom = c_zoom_min
			end
		elseif action_id == c_mouse_button_middle then
			-- If the middle mouse button is down, then enable camera movement.
			self.v_moving = true
		elseif action_id == c_key_space then
			-- If the space bar is pressed, then shake the camera.
			m_starly.shake(c_id_starly, 10, 0.125, 10, 0.75, 0.75)
		end
	-- If the middle mouse button is released, then disable camera movement.
	elseif action.released then
		if action_id == c_mouse_button_middle then
			self.v_moving = false
		end
	end
end