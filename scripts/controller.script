--------------------------------------------------------------------------------
-- Dependencies
--------------------------------------------------------------------------------

local m_starly = require "starly.modules.starly"

--------------------------------------------------------------------------------
-- Constants
--------------------------------------------------------------------------------

local c_msg_acquire_input_focus = hash("acquire_input_focus")

local c_mouse_wheel_up = hash("mouse_wheel_up")
local c_mouse_wheel_down = hash("mouse_wheel_down")
local c_mouse_button_middle = hash("mouse_button_middle")
local c_key_space = hash("key_space")

local c_id_starly_root = hash("/starly_root")
local c_id_starly = hash("/starly")

--------------------------------------------------------------------------------
-- Variables
--------------------------------------------------------------------------------

local v_panning = false

--------------------------------------------------------------------------------
-- Local Functions
--------------------------------------------------------------------------------

local function zoom_camera(offset)
	local starly_script_url = msg.url(nil, c_id_starly, "script")
	local to = go.get(starly_script_url, "zoom") + offset
	go.animate(starly_script_url, "zoom", go.PLAYBACK_ONCE_FORWARD, to, go.EASING_OUTQUAD, 0.1)
end

local function pan_camera(offset_x, offset_y)
	local starly_script_url = msg.url(nil, c_id_starly, "script")
	local zoom = go.get(starly_script_url, "zoom")
	local position = go.get_position(c_id_starly_root)
	local offset = vmath.vector3(offset_x, offset_y, 0) / zoom
	go.set_position(position + offset, c_id_starly_root)
end

--------------------------------------------------------------------------------
-- Engine Functions
--------------------------------------------------------------------------------

function init(self)
	msg.post(msg.url(), c_msg_acquire_input_focus)
end

function on_input(self, action_id, action)
	if not action_id then
		if v_panning then
			pan_camera(-action.screen_dx, -action.screen_dy)
		end
	elseif action.pressed then
		if action_id == c_mouse_wheel_up then
			zoom_camera(2)
		elseif action_id == c_mouse_wheel_down then
			zoom_camera(-2)
		elseif action_id == c_mouse_button_middle then
			v_panning = true
		elseif action_id == c_key_space then
			m_starly.shake(c_id_starly, 10, 0.125, 5, 0.75, 0.75)
		end
	elseif action.released then
		if action_id == c_mouse_button_middle then
			v_panning = false
		end
	end
end