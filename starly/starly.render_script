--------------------------------------------------------------------------------
-- Header
--------------------------------------------------------------------------------

-- GitHub: https://github.com/VowSoftware/starly

-- This render script is a feature-rich template, but not a complete solution.
-- If you decide to use it, then you must copy and paste it into your own project,
-- then edit what needs to be edited.
--
-- For example, you may need to add custom predicates and custom targets.
-- You are also required to write the `update()` function from scratch,
-- since most projects require a custom render sequence.
--
-- Depsite providing this template, you are encouraged to build your own render script from scratch,
-- based on your project's specific requirements.

--------------------------------------------------------------------------------
-- Dependencies
--------------------------------------------------------------------------------

local m_starly = require "starly.starly"

--------------------------------------------------------------------------------
-- Constants
--------------------------------------------------------------------------------

-- Engine messages.
local g_msg_window_resized = hash("window_resized")

-- Default clear color, specified in the *game.project* file.
local g_clear_color = vmath.vector4(sys.get_config_number("render.clear_color_red"), sys.get_config_number("render.clear_color_green"), sys.get_config_number("render.clear_color_blue"), sys.get_config_number("render.clear_color_alpha"))

-- Contains all predicates.
--
-- Predicate handles are created in the `create_predicates()` function.
-- To add a new predicate, simply add a new table alongside the existing tables.
--
-- Example: `render.draw(g_predicates.tile.handle)`
local g_predicates =
{
	model =
	{
		handle = nil,
		tags = { hash("model") }
	},
	tile =
	{
		handle = nil,
		tags = { hash("tile") }
	},
	particle =
	{
		handle = nil,
		tags = { hash("particle") }
	},
	gui =
	{
		handle = nil,
		tags = { hash("gui") }
	},
	debug_text =
	{
		handle = nil,
		tags = { hash("debug_text") }
	}
}

-- Contains all render targets.
--
-- Target handles are created in the `create_targets()` function.
-- To add a new target, simply add a new table alongside the existing tables.
--
-- If your custom target was already created in a *.render_target* file,
-- then initialize `handle` as `hash("custom_target_name")` instead of `nil`.
-- This tells the `create_targets()` function to skip creating that target.
--
-- If your custom target shouldn't include a color, depth, or stencil buffer,
-- then don't specify a clear value for those buffers.
-- This tells the `create_targets()` function to skip creating those buffers.
--
-- Targets are initially sized according to their `default_width` and `default_height` fields,
-- where `nil` matches the default window size, specified in the *game.project* file.
--
-- Targets are automatically resized in the `resize_targets()` function to match the window size,
-- but only if the `resize` field is `true`.
-- If your custom target requires more nuanced resizing or shouldn't be resized,
-- then initialize `resize` to `false` and add custom logic to the `resize_targets()` function.
--
-- Example: `render.set_render_target(g_targets.default.handle)`
--          `render.clear(g_targets.default.clear)`
local g_targets =
{
	default =
	{
		handle = nil,
		format = graphics.TEXTURE_FORMAT_RGBA,
		default_width = nil,
		default_height = nil,
		resize = false,
		depth_texture_bit = false,
		stencil_texture_bit = false,
		clear =
		{
			[graphics.BUFFER_TYPE_COLOR0_BIT] = g_clear_color,
			[graphics.BUFFER_TYPE_DEPTH_BIT] = 1,
			[graphics.BUFFER_TYPE_STENCIL_BIT] = 0
		}
	}
}

--------------------------------------------------------------------------------
-- Local Functions
--------------------------------------------------------------------------------

-- Creates all predicates in the `g_predicates` table.
local function create_predicates()
	for _, predicate in pairs(g_predicates) do
		predicate.handle = render.predicate(predicate.tags)
	end
end

-- Creates all targets in the `g_targets` table.
local function create_targets()
	local window_width, window_height = render.get_window_width(), render.get_window_height()
	for name, target in pairs(g_targets) do
		-- Don't create this target if it's the default target.
		-- Also don't create this target if it already has a handle,
		-- which is the case for targets that were already created in a *.render_target* file.
		if name ~= "default" and not target.handle then
			local settings = {}
			-- If the color buffer's clear value is specified, then create a color buffer.
			if target.clear[graphics.BUFFER_TYPE_COLOR0_BIT] then
				settings[graphics.BUFFER_TYPE_COLOR0_BIT] =
				{
					format = target.format,
					width = target.default_width and target.default_width or window_width,
					height = target.default_height and target.default_height or window_height
				}
			end
			-- If the depth buffer's clear value is specified, then create a depth buffer.
			if target.clear[graphics.BUFFER_TYPE_DEPTH_BIT] then
				settings[graphics.BUFFER_TYPE_DEPTH_BIT] =
				{
					format = target.format,
					width = target.default_width and target.default_width or window_width,
					height = target.default_height and target.default_height or window_height,
					texture_bit = target.depth_texture_bit
				}
			end
			-- If the stencil buffer's clear value is specified, then create a stencil buffer.
			if target.clear[graphics.BUFFER_TYPE_STENCIL_BIT] then
				settings[graphics.BUFFER_TYPE_STENCIL_BIT] =
				{
					format = target.format,
					width = target.default_width and target.default_width or window_width,
					height = target.default_height and target.default_height or window_height,
					texture_bit = target.stencil_texture_bit
				}
			end
			target.handle = render.render_target(name, settings)
		end
	end
end

-- Resizes all targets in the `g_targets` table.
-- This function is called by the `on_message()` function.
local function resize_targets()
	local window_width, window_height = render.get_window_width(), render.get_window_height()
	for name, target in pairs(g_targets) do
		-- The default target is automatically resized by Defold, so don't resize it manually.
		if name ~= "default" then
			if target.resize then
				-- Resize this target to match the window size.
				render.set_render_target_size(target.handle, window_width, window_height)
			else
				-- Targets whose `resize` field is `false` are not resized to match the window size.
				-- Add custom logic for those targets here.
			end
		end
	end
end

--------------------------------------------------------------------------------
-- Engine Functions
--------------------------------------------------------------------------------

function init(self)
	create_predicates()
	create_targets()
end

function update(self, dt)
	-- Write your custom render sequence here.
	-- Remember to call `m_starly.activate()` before submitting a draw call.
	-- See Starly's example project for a very simple reference.
end

function on_message(self, message_id, message, sender)
	-- If the window is resized, then resize all relevant targets.
	if message_id == g_msg_window_resized then
		resize_targets()
	end
end